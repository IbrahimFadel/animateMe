function wait(t) {
	return new Promise(e => {
		setTimeout(() => {
			e("resolved");
		}, t);
	});
}
function getTargets(t) {
	const e = Object.keys(t).length;
	let n = null;
	for (let s = 0; s < e; s++) {
		const e = Object.keys(t)[s],
			i = Object.values(t)[s];
		"targets" === e && (n = i);
	}
	const s = n.split(" ");
	let i = [],
		o = [];
	for (let t of s) {
		const e = t.slice(0, 1);
		if ("." === e) {
			const e = t.split("");
			e.splice(0, 1);
			const n = e.join("");
			i.push(n);
		} else if ("#" === e) {
			const e = t.split("");
			e.splice(0, 1);
			const n = e.join("");
			o.push(n);
		}
	}
	return [i, o];
}
function getAnimationSettings(t) {
	const e = Object.keys(t),
		n = Object.values(t);
	let s = {};
	return (
		e.forEach((t, e) => {
			let i = n[e];
			"infinite" === t
				? (s.infinite = i)
				: "delay" === t
				? (s.delay = i)
				: "duration" === t
				? (s.duration = i)
				: "easing" === t && (s.easing = i);
		}),
		s
	);
}
function getAnimations(t) {
	const e = Object.keys(t),
		n = Object.values(t);
	let s = [];
	return (
		e.forEach((t, e) => {
			let i = n[e];
			if ("animations" === t) {
				const t = Object.keys(i),
					e = Object.values(i);
				t.forEach((t, n) => {
					const i = [t, e[n].value];
					s.push(i);
				});
			}
		}),
		s
	);
}
function parseConfig(t) {
	return [getTargets(t), getAnimationSettings(t), getAnimations(t)];
}
function createTransformString(t) {
	var e = "";
	const n = t.length;
	for (let s = 0; s < n; s++) {
		e += t[s][0] + "(" + t[s][1] + ")";
	}
	return e;
}
async function applyAnimations(t) {
	const e = t[0],
		n = t[1],
		s = t[2],
		i = n.delay,
		o = n.duration,
		a = n.easing,
		r = (n.infinite, createTransformString(s));
	setTimeout(() => {
		for (let t = 0; t < e.length; t++)
			if (0 === t)
				for (let n = 0; n < e[t].length; n++) {
					const s = document.getElementsByClassName(e[t][n]);
					for (let t = 0; t < s.length; t++)
						(s[t].style.transition = "transform " + o + " " + a),
							(s[t].style.transform = r);
				}
			else if (1 === t)
				for (let n = 0; n < e[t].length; n++) {
					const s = document.getElementById(e[t][n]);
					(s.style.transition = "transform " + o + " " + a),
						(s.style.transform = r);
				}
	}, i);
	const c = parseInt(i) + parseInt(o.slice(0, -1) + "000");
	await wait(c);
}
async function animateMe(t) {
	const e = parseConfig(t);
	await applyAnimations(e);
}
